openapi: 3.0.3
info:
  title: Rental Soulmate
  description: This is API documentation for example project Rental Soulmate By Alfian Aditya

  version: 1.0.0
  contact:
    name: Alfian Aditya
    email: alfianadityadwi@gmail.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/icxz1/Rental-Soulmate/1.0.0

tags:
  - name: Auth
  - name: Users
  - name: Talents
  - name: Follows
  - name: Posts
  - name: Comments
  - name: Likes
  - name: Whistlists
  - name: Bookings

########
# AUTH #
########
paths:
  /register:
    post:
      tags:
        - "Auth"
      description: user register new account
      summary: register new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Chizuru Ichinose"
                date_of_birth:
                  type: string
                  example: "01-04-1996"
                phone_number:
                  type: string
                  example: "0888444222"
                email:
                  type: string
                  format: email
                  example: "chizichi@example.com"
                role:
                  type: string
                  example: "User"
                password:
                  type: string
                  format: password
                  example: "chizichi123"
      responses:
        201:
          description: "status created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  name: "Chizuru Ichinose"
                  date_of_birth: "01-04-1996"
                  phone_number: "0888444222"
                  email: "chizichi@example.com"
                  role: "User"
                message: success creating account
        400:
          description: "status bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                data cannot be empty:
                  value:
                    message: data not allowed empty
                data duplicated:
                  value:
                    message: data already used
        500:
          $ref: "#/components/responses/500"

  /login:
    post:
      tags:
        - "Auth"
      description: login to platform
      summary: login for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "chizichi@example.com"
                password:
                  type: string
                  format: password
                  example: "chizichi123"
      responses:
        200:
          description: "status OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "Chizuru Ichinose"
                  email: "chizichi@example.com"
                  role: "User"
                  profile_picture: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
                message: login success
        400:
          description: "status bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                data cannot be empty:
                  value:
                    message: data not allowed empty
                data not matched:
                  value:
                    message: password or email not matched
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

#########
# USERS #
#########
  /home:
    get:
      tags:
        - "Users"
      description: show all talents contents
      summary: show all talents contents in homepage
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObjectArr"
              example:
                data:
                  - id: 1
                    image: ""
                    area: "Shibuya"
                    date: "11-02-2023"
                    time: "13.00 - 15.00"
                    talents:
                      id_talents: 1
                      name: "Megumi Horizka"
                      role: "Talent"
                      age: 22
                      gender: "female"
                      profile_picture: ""
                  - id: 2
                    image: ""
                    area: "Shinjuku"
                    date: "11-02-2023"
                    time: "18.00 - 20.00"
                    talents:
                      id_talents: 2
                      name: "Hori Kurima"
                      role: "Talent"
                      age: 20
                      gender: "female"
                      profile_picture: ""
                  - id: 3
                    image: ""
                    area: "Tokyo"
                    date: "11-02-2023"
                    time: "17.00 - 19.00"
                    talents:
                      id_talents: 3
                      name_talent: "Toru Inikawa"
                      role: "Talent"
                      age: 23
                      gender: "male"
                      profile_picture: ""
                  - id: 4
                    image: ""
                    area: "Shibuya"
                    date: "12-02-2023"
                    time: "08.00 - 09.00"
                    talents:
                      id_talents: 4
                      name_talent: "Lisa Kanakawa"
                      role: "Talent"
                      age: 21
                      gender: "female"
                      profile_picture: ""
                message: success show all talents contents
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /users:
    put:
      tags:
        - "Users"
      description: update profile user
      summary: update or edit information profile for user
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Chizuru Ichinose"
                date_of_birth:
                  type: string
                  example: "01-04-1996"
                phone_number:
                  type: string
                  example: "0888444222"
                profile_picture:
                  type: string
                  example: ""
                email:
                  type: string
                  format: email
                  example: "chizichi@example.com"
      responses:
        201:
          description: "status created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "Chizuru Ichinose"
                  role: "User"
                  date_of_birth: "01-04-1996"
                  phone_number: "0888444222"
                  profile_picture: ""
                  email: "chizichi@example.com"
                message: success update account information
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - "Users"
      description: delete user account
      summary: delete account
      security:
        - JWTAuth: []
      responses:
        200:
          description: "status OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success delete account
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - "Users"
      description: getting account information
      summary: show account information
      security:
        - JWTAuth: []
      responses:
        200:
          description: "status OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "Chizuru Ichinose"
                  role: "User"
                  email: "chizichi@example.com"
                  date_of_birth: "01-04-1996"
                  phone_number: "0888444222"
                  profile_picture: ""
                message: success show profile
        404:
          description: "status not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "account data not found"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /talents/{talent_id}:
    get:
      tags:
        - "Users"
      description: getting talent account information
      summary: show talent account detail information
      security:
        - JWTAuth: []
      responses:
        200:
          description: "status OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 5
                  name: "Julien Angel"
                  role: "Talent"
                  bio: "Cheers up, hypocratic people"
                  gender: "male"
                  date_of_birth: "02-12-1995"
                  area: "Shibuya"
                  phone_number: "0888222555"
                  profile_picture: ""
                  email: "anjul@example.com"
                  followers: 58
                  whistlists: 40
                message: success show talent profile
        404:
          description: "status not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "account data not found"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

###########
# TALENTS #
###########
  /talents:
    get:
      tags:
        - "Talents"
      description: get detail talent information
      summary: show detail talent information
      security:
        - JWTAuth: []
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 5
                  name: "Julien Angel"
                  role: "Talent"
                  bio: "Cheers up, hypocratic people"
                  gender: "male"
                  date_of_birth: "02-12-1995"
                  area: "Shibuya"
                  phone_number: "0888222555"
                  profile_picture: ""
                  email: "anjul@example.com"
                  followers: 58
                  whistlists: 40
                message: success show detail account
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    put:
      tags:
        - "Talents"
      description: talent can edit their porfile information
      summary: update profile talent information
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Juliana Aan"
                bio:
                  type: string
                  example: "Coffe and Croissant never fail make good mood"
                area:
                  type: string
                  example: "Shinjuku"
                phone_number:
                  type: string
                  example: "0888222555"
                profile_picture:
                  type: string
                  example: ""
                email:
                  type: string
                  format: email
                  example: "anjul@example.com"
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 5
                  name: "Juliana Aan"
                  role: "Talent"
                  bio: "Coffe and Croissant never fail make good mood"
                  area: "Shinjuku"
                  phone_number: "0888222555"
                  profile_picture: ""
                  email: "anjul@example.com"
                message: success update data
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - "Talents"
      description: delete talent account data
      summary: delete talent account
      security:
        - JWTAuth: []
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success delete account
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

##########
# FOLLOW #
##########
  /follow/{talent_id}:
    post:
      tags:
        - "Follows"
      description: users can follow talent by talent id
      summary: follow talent by talent id
      security:
        - JWTAuth: []
      parameters:
        - name: talent_id
          description: "talent id"
          required: true
          in: path
          schema:
            description: "talent id"
            type: string
            example: 1
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success following talent
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /unfollow/{talent_id}:
    delete:
      tags:
        - "Follows"
      description: users can unfollow talent by talent id
      summary: unfollow talent by talent id
      security:
        - JWTAuth: []
      parameters:
        - name: talent_id
          description: "talent id"
          required: true
          in: path
          schema:
            description: "talent id"
            type: string
            example: 1
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success unfollow talent
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

#########
# POSTS #
#########
  /posts:
    post:
      tags:
        - "Posts"
      description: talents can create post for booking schedule
      summary: create post for talents
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: ""
                content:
                  type: string
                  example: "Wanna hang out with me @ Shinjuku tomorrow?"
                area:
                  type: string
                  example: "Shinjuku"
                date:
                  type: string
                  example: "02-04-2023"
                time:
                  type: string
                  example: "17.00 - 19.00"
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  image: ""
                  content: "Wanna hang out with me @ Shinjuku tomorrow?"
                  role: "Talent"
                  area: "Shinjuku"
                  date: "02-04-2023"
                  time: "17.00 - 19.00"
                message: "success create post"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - "Posts"
      description: talent can delete posts for booking schedule
      summary: delete talent posts
      security:
        - JWTAuth: []
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success delete post
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    put:
      tags:
        - "Posts"
      description: talent can edit their post content
      summary: edit post
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "Wanna hang out with me @ Shinjuku tomorrow?"
                area:
                  type: string
                  example: "Shinjuku"
                date:
                  type: string
                  example: "02-04-2023"
                time:
                  type: string
                  example: "17.00 - 19.30"
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  image: ""
                  content: "Wanna hang out with me @ Shinjuku tomorrow?"
                  role: "Talent"
                  area: "Shinjuku"
                  date: "02-04-2023"
                  time: "17.00 - 19.30"
                message: "success update post"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

#############
# COMMENTS #
############
  /comments/{post_id}:
    post:
      tags:
        - "Comments"
      description: make comment to talent post by post id
      summary: make comment to talend post
      security:
        - JWTAuth: []
      parameters:
        - name: post_id
          description: "post id"
          required: true
          in: path
          schema:
            description: "post id"
            type: string
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "wanna meet you tommorow @ shinjuku aww"
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  comment: "Wanna hang out with u @ Shinjuku tomorrow?"
                message: "success create comment"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - "Comments"
      description: show comment in talent post by post id
      summary: show comment in talend post
      security:
        - JWTAuth: []
      parameters:
        - name: post_id
          description: "post id"
          required: true
          in: path
          schema:
            description: "post id"
            type: string
            example: 1
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  - id: 1
                    user_id: 1
                    user_name: miku
                    comment: "Wanna hang out with u @ Shinjuku tomorrow?"
                  - id: 2
                    user_id: 5
                    user_name: keita
                    comment: "Aww cant wait meet u for another chance"
                  - id: 3
                    user_id: 1
                    user_name: miku
                    comment: "beautiful as alwaysss"
                  - id: 4
                    user_id: 7
                    user_name: hamamayu
                    comment: "sad bcs not at shinjuku tommorow T_T"
                message: "success show all comments"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /comments/{post_id}/{comment_id}:
    delete:
      tags:
        - "Comments"
      description: users can delete comment on talent post
      summary: delete users comment
      security:
        - JWTAuth: []
      parameters:
        - name: post_id
          description: "post id"
          required: true
          in: path
          schema:
            description: "post id"
            type: string
            example: 1
        - name: comment_id
          description: "comment id"
          required: true
          in: path
          schema:
            description: "comment id"
            type: string
            example: 1
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success delete comment
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

##########
# LIKES #
#########
  /like/{post_id}:
    post:
      tags:
        - "Likes"
      description: like to talent post by post id
      summary: like to talend post
      security:
        - JWTAuth: []
      parameters:
        - name: post_id
          description: "post id"
          required: true
          in: path
          schema:
            description: "post id"
            type: string
            example: 1
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success like post"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /unlike/{post_id}:
    delete:
      tags:
        - "Likes"
      description:  unlike to talent post by post id
      summary: unlike to talend post
      security:
        - JWTAuth: []
      parameters:
        - name: post_id
          description: "post id"
          required: true
          in: path
          schema:
            description: "post id"
            type: string
            example: 1
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success unlike post"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

##############
# WHISTLISTS #
##############
  /whistlists:
    get:
      tags:
        - "Whistlists"
      description: user can see all talents in their whistlist
      summary: see all talents in whistlist
      security:
        - JWTAuth: []
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObjectArr"
              example:
                data:
                  id: 1
                  user_id: 1
                  talents:
                    - talents_id: 2
                      name: "Hori Kurima"
                      role: "Talent"
                      age: 20
                      gender: "female"
                      profile_picture: ""
                    - talents_id: 4
                      name_talent: "Lisa Kanakawa"
                      role: "Talent"
                      age: 21
                      gender: "female"
                      profile_picture: "https://unsplash.com/photos/rDEOVtE7vOs"
                message: success show all talents
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /whistlists/{talent_id}:
    post:
      tags:
        - "Whistlists"
      description: user can add talents to whistlist
      summary: add talent to whistlist
      security:
        - JWTAuth: []
      parameters:
        - name: talent_id
          description: "talent id"
          required: true
          in: path
          schema:
            description: "talent_id"
            type: string
            example: 1
      responses:
        201:
          description: status created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  talents_id: 1
                  talents_name: "Julian Aan"
                  role: "Talent"
                  profile_picture: "https://unsplash.com/photos/rDEOVtE7vOs"
                  gender: "female"
                  age: 23
                  area: "Shinjuku"
                message: success add talent to whistlist
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - "Whistlists"
      description: delete talent from whistlist
      summary: delete talent from whistlist
      security:
        - JWTAuth: []
      parameters:
        - name: talent_id
          description: "talent id"
          required: true
          in: path
          schema:
            description: "talent_id"
            type: string
            example: 1
      responses:
        200:
          description: status OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success delete talent from whistlist
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

############
# BOOKINGS #
############
  /bookings:
    post:
      tags:
        - "Bookings"
      description: add booking to payment gateway
      summary: add booking to payment gateway
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                  type: number
                  example: 80000
      responses:
        201:
          description: order payment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  user_id: 1
                  talent_id: 2
                  total_price: 80000
                  create_at: "2023-02-06T02:11:48"
                  redirect_url: "https://app.sandbox.midtrans.com/snap/v3/redirection/b95128fb-f2ef-4e57-bd89-c4a187cca536"
                  status_order: "waiting for payment"
                message: order payment created
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - "Bookings"
      description: show bookings history
      summary: show bookings history
      security:
        - JWTAuth: []
      responses:
        200:
          description: success show bookings history
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObjectArr"
              example:
                data:
                  - id: 1
                    user_id: 1
                    user_name: "Chizuru Ichinose"
                    talent_id: 2
                    talent_name: "Hori Kurima"
                    total_price: 80000
                    create_at: "2023-02-06T02:11:48"
                    status_order: "waiting payment"
                  - id: 2
                    user_id: 1
                    user_name: "Chizuru Ichinose"
                    talent_id: 4
                    talent_name: "Lisa Kanakawa"
                    total_price: 80000
                    create_at: "2023-01-31T02:11:48"
                    status_order: "transaction success"
                message: success show bookings history
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /paymentnotification:
    post:
      tags:
        - "Bookings"
      description: recieve payment notification from payment gateway
      summary: recieve payment notification from payment gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookings_id:
                  type: string
                  example: "transaction-1"
      responses:
        200:
          description: success show order status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success handling payment notification
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /bookings/{bookings_id}:
    put:
      tags:
        - "Bookings"
      description: update booking status
      summary: update booking status
      security:
        - JWTAuth: []
      parameters:
        - name: bookings_id
          description: "bookings id"
          required: true
          in: path
          schema:
            description: "bookings_id"
            type: string
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                booking_status:
                  type: string
            example:
              booking_status: success
      responses:
        200:
          description: success update booking status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: success update booking status
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

components:
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        message:
          type: string

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  responses:
    400:
      description: status bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
                invalid input:
                  value:
                    message: "invalid input"
                invalid jwt:
                  value:
                    message: "invalid jwt"
    404:
          description: status not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "data not found"
    500:
      description: internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: internal server error
